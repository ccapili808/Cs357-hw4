-- Exercise 1
stutter :: [a] -> [a]
stutter [] = []
stutter (x:ls) = x : x : stutter ls

-- Exercise 2
compress :: Eq a => [a] -> [a]
compress [] = []
compress [x] = [x] 
compress (x:y:ls)
  | x == y   = compress (y:ls)
  | otherwise = x : compress(y:ls)

-- Exercise 3
-- I was orginally getting errors when using zip, so I had to do some research. 
-- According to https://wiki.haskell.org/Converting_numbers#:~:text=The%20workhorse%20for%20converting%20from,)%20%3D%3E%20a%20%2D%3E%20b
-- From integral can handle the error I was getting with Num B. 
-- Using a helper with an accumulator and recursion...
findIndices :: Num b => (a -> Bool) -> [a] -> [b]
findIndices pred ls = findIndicesHelper pred ls 0
  where
    findIndicesHelper _ [] _ = []
    findIndicesHelper pred (x:ls) i =
      if pred x
        then fromIntegral i : findIndicesHelper pred ls (i + 1)
        else findIndicesHelper pred ls (i + 1)

-- Using list comprehension with infix elem as our 'guard'
intersect :: Eq a => [a] -> [a] -> [a]
intersect ls1 ls2 = [x | x <- ls1, x `elem` ls2]

-- Exercise 4
{-
The function isPrefixOf takes two lists as argument and returns True iff the first list is a prefix
of the second list. For example,
  *Main> "foo" ‘isPrefixOf‘ "foobar"
True
*Main> isPrefixOf [1,2,3] [4,5,6]
False
-}
isPrefixOf :: Eq a => [a] -> [a] -> Bool
isPrefixOf [] _ = True
isPrefixOf _ [] = False
isPrefixOf (x:ls) (y:ls2)
  | x == y = isPrefixOf ls ls2
  | otherwise = False

-- Exercise 5
isSuffixOf :: Eq a => [a] -> [a] -> Bool
-- According to https://hoogle.haskell.org/?hoogle=drop, drop can help here. 
-- Remove the first n (length of suffix) items from the ls
-- Then compare the suffix and the list after we call drop 
isSuffixOf suffix ls = suffix == drop (length ls - length suffix) ls

-- Exercise 6
-- Using zip from https://hoogle.haskell.org/?hoogle=zip
-- Zip takes two lists and returns a list of corresponding pairs. 
-- Use sum and zip for dot product!
dot :: Num a => [a] -> [a] -> a
dot u v = sum [x * y | (x, y) <- zip u v]

-- Exercise 7
increasing :: Ord a => [a] -> Bool
increasing [] = True
increasing[x] = True
increasing (x:y:ls) = x <= y && increasing(y:ls)

-- Exercise 8
-- We need to eliminate every number where mod 10 is zero. 
-- Or conversely we need to keep every number where mod 10 is not zero. 
-- Filter is the most intuitive for me, we can filter out each instance where mod 10 = 0. 
-- However, when I tried to use filter, I ran into issues with tuples... So I needed to change my 
-- implementation in the following way: 
--     using zip, we can capture each item where mod 10 != 0. 
decimate :: [a] -> [a]
decimate ls = [x | (i, x) <- zip [1..] ls, i `mod` 10 /= 0]

-- Exercise 9
{-two lists of equal length and a third list. It uses
the first two lists to define a substitution cipher which it uses to encipher the third list. For
example,
*Main> encipher [’A’..’Z’] [’a’..’z’] "THIS"
"this"
-- In essence, we have a baseList and target list. We want convert the third argument into the 
-- target list THIS -> this 
-- The two target lists will be the same size, so we have a 1-1 mapping. 
-- Once this mapping is found, we can convert each character of the string(list of chars) to the target lists map. 
-}
encipher :: Eq a => [a] -> [a] -> [a] -> [a]
encipher baseLs targetLs ls = map encipherHelper ls
  where 
     encipherHelper i = case lookup i mapHelper of 
          Just target -> target
          Nothing -> i 
     mapHelper = zip baseLs targetLs

-- Exercise 10
-- [1..10] -> [1,3,6,10,15,21,28,36,45,55]
-- [0+1, 1+2, 3+3, 6+4, ....] 
-- Using recursion we can add each item like it is done above. 
-- sum is an accumulator which starts at zero, and then adds the last calculation result to the 
-- current number in the list
prefixSum :: Num a => [a] -> [a]
prefixSum ls = prefixSum' ls 0
  where 
    prefixSum' []_ = []
    prefixSum' (x:ls) sum = (sum + x) : prefixSum' ls (sum + x) 

-- Exercise 11
{- The function select takes a predicate and two lists as arguments and returns a list composed
of elements from the second list in those positions where the predicate, when applied to the
element in the corresponding positions of the first list, returns True.
-}
-- 1) use zip to combine list into pairs 2) use filter to check which pairs first element satisfies the pred
-- 3) Use map and the 'snd' to get the second element of the remaining pairs which will be sent to the output ls if satifies. 
select :: (t -> Bool) -> [t] -> [a] -> [a]
select pred firstLs secondLs = map snd (filter (\(i, _) -> pred i) (zip firstLs secondLs))

-- Exercise 12
-- The function numbers which takes a list of integers as its argument and returns the integer
-- which has those numbers as digits. For example,
-- Each number needs to be multiplied by: 
-- [1 2 3 4] -> 1234 
-- Steps: 1) Reverse list, 2) start with first number in reversed list * 10^pwracc, where pwracc increments at each 
-- number. 3) sum all results. 
-- 4*10^0 + 3*10^1 + 2*10^2 + 1 * 10^3 = 1234
-- The pdf says this must be tail recusrive. So the steps above are a little misleading. 
-- Nevertheless, I will still be using the logic above, in a tail recursive way. 
numbers :: [Integer] -> Integer
numbers ls = helper (reverse ls) 0 0
  where 
    helper [] _ acc = acc
    helper (i: ls) pwrAcc acc = let tailRecur = acc + i * 10^pwrAcc in helper ls (pwrAcc+1) tailRecur
                          
  
